#!/usr/bin/env php
<?php

declare(strict_types=1);

use Concrete\Console\Application;
use Concrete\Console\Command;
use Concrete\Console\Concrete\ConcreteServiceProvider;
use Concrete\Console\Exception;
use Concrete\Console\Installation\InstallationServiceProvider;
use League\Container\Container;
use League\Container\ReflectionContainer;
use NunoMaduro\Collision\Provider as Collision;

if (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    /**
     * @psalm-suppress MissingFile
     */
    require_once __DIR__ . '/../vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../../autoload.php')) {
    /**
     * @psalm-suppress MissingFile
     */
    require_once __DIR__ . '/../../autoload.php';
} else {
    /**
     * @psalm-suppress MissingFile
     */
    require_once __DIR__ . '/../../../autoload.php';
}

// Declare c5 execute
if (!defined('C5_EXECUTE')) {
    define('C5_EXECUTE', 'concrete5/console');
}

// Setup debug stuff if available
if (class_exists(Collision::class)) {
    /** @psalm-suppress MixedMethodCall */
    (new Collision())->register();
}

// Set up DI container
$container = new Container();
$container->delegate(new ReflectionContainer());
$container->addServiceProvider(ConcreteServiceProvider::class);
$container->addServiceProvider(InstallationServiceProvider::class);

// Set up an inflector for the container itself
$container->inflector(\League\Container\ContainerAwareInterface::class)
    ->invokeMethod('setContainer', [$container]);

// Setup console application
$application = new Application($container);

// Set up an inflector for the console
$container->inflector(Command\ConsoleAwareInterface::class)
    ->invokeMethod('setConsole', [$application]);

// Run
try {
    // Add commands
    $application->run();
} catch(Exception\Installation\InstallationNotFound $e) {
    $output = $application->getOutputStyle();

    if ($output->isVeryVerbose()) {
        throw $e;
    }
    $output->error($e->getMessage());
    die($e->getCode());
} catch (Throwable $e) {
    $output = $application->getOutputStyle();

    if ($output->isVeryVerbose()) {
        throw $e;
    }

    $output->error($e->getMessage());
    die($e->getCode());
}
